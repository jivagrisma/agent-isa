#!/usr/bin/env python3
"""
Script de prueba para el generador de im√°genes.
"""

import argparse
import asyncio
import json
import logging
import sys
import os
import base64
from pathlib import Path
from typing import Dict, Any, Optional, List

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# A√±adir el directorio actual al path para importar m√≥dulos locales
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar m√≥dulos necesarios
from modules.core import ConfigManager
from modules.image import ImageGenerator

def test_generate_image(
    prompt: str,
    model: Optional[str] = None,
    style: Optional[str] = None,
    size: Optional[str] = None,
    format: Optional[str] = None,
    output_path: Optional[str] = None
):
    """
    Prueba la generaci√≥n de im√°genes.
    
    Args:
        prompt: Descripci√≥n textual de la imagen
        model: Modelo a utilizar
        style: Estilo de la imagen
        size: Tama√±o de la imagen
        format: Formato de la imagen
        output_path: Ruta de salida para la imagen
    """
    try:
        # Inicializar gestor de configuraci√≥n
        config_manager = ConfigManager()
        
        # Inicializar generador de im√°genes
        image_generator = ImageGenerator(config_manager)
        
        # Generar imagen
        print(f"\nüñºÔ∏è Generando imagen con prompt: '{prompt}'")
        if model:
            print(f"Modelo: {model}")
        if style:
            print(f"Estilo: {style}")
        if size:
            print(f"Tama√±o: {size}")
        if format:
            print(f"Formato: {format}")
        print("\n")
        
        result = image_generator.generate_image(
            prompt=prompt,
            model=model,
            style=style,
            size=size,
            format=format,
            save=True
        )
        
        # Verificar resultado
        if "error" in result:
            print(f"‚ùå Error: {result['error']}")
            return None
        
        # Mostrar resultado
        print("‚úÖ Imagen generada:")
        print(f"Modelo: {result['model']}")
        if "style" in result and result["style"]:
            print(f"Estilo: {result['style']}")
        print(f"Tama√±o: {result['size']}")
        print(f"Formato: {result['format']}")
        
        # Guardar imagen en ruta espec√≠fica si se proporciona
        if output_path and "image_data" in result:
            try:
                image_data = base64.b64decode(result["image_data"])
                with open(output_path, "wb") as f:
                    f.write(image_data)
                print(f"Imagen guardada en: {output_path}")
            except Exception as e:
                print(f"Error al guardar imagen en {output_path}: {e}")
        
        # Mostrar ruta de la imagen guardada
        if "image_path" in result and result["image_path"]:
            print(f"Imagen guardada en: {result['image_path']}")
        
        return result
    
    except Exception as e:
        logger.error(f"Error en generaci√≥n de imagen: {e}")
        print(f"‚ùå Error: {e}")
        return None

def test_edit_image(
    image_path: str,
    operations: List[Dict[str, Any]],
    format: Optional[str] = None,
    output_path: Optional[str] = None
):
    """
    Prueba la edici√≥n de im√°genes.
    
    Args:
        image_path: Ruta de la imagen a editar
        operations: Lista de operaciones a aplicar
        format: Formato de salida
        output_path: Ruta de salida para la imagen
    """
    try:
        # Inicializar gestor de configuraci√≥n
        config_manager = ConfigManager()
        
        # Inicializar generador de im√°genes
        image_generator = ImageGenerator(config_manager)
        
        # Editar imagen
        print(f"\n‚úèÔ∏è Editando imagen: {image_path}")
        print(f"Operaciones: {json.dumps(operations, indent=2)}")
        if format:
            print(f"Formato de salida: {format}")
        print("\n")
        
        result = image_generator.edit_image(
            image_data=image_path,
            operations=operations,
            format=format,
            save=True
        )
        
        # Verificar resultado
        if "error" in result:
            print(f"‚ùå Error: {result['error']}")
            return None
        
        # Mostrar resultado
        print("‚úÖ Imagen editada:")
        print(f"Formato: {result['format']}")
        print(f"Dimensiones: {result['width']}x{result['height']}")
        
        # Guardar imagen en ruta espec√≠fica si se proporciona
        if output_path and "image_data" in result:
            try:
                image_data = base64.b64decode(result["image_data"])
                with open(output_path, "wb") as f:
                    f.write(image_data)
                print(f"Imagen guardada en: {output_path}")
            except Exception as e:
                print(f"Error al guardar imagen en {output_path}: {e}")
        
        # Mostrar ruta de la imagen guardada
        if "image_path" in result and result["image_path"]:
            print(f"Imagen guardada en: {result['image_path']}")
        
        return result
    
    except Exception as e:
        logger.error(f"Error en edici√≥n de imagen: {e}")
        print(f"‚ùå Error: {e}")
        return None

def test_analyze_image(image_path: str):
    """
    Prueba el an√°lisis de im√°genes.
    
    Args:
        image_path: Ruta de la imagen a analizar
    """
    try:
        # Inicializar gestor de configuraci√≥n
        config_manager = ConfigManager()
        
        # Inicializar generador de im√°genes
        image_generator = ImageGenerator(config_manager)
        
        # Analizar imagen
        print(f"\nüîç Analizando imagen: {image_path}")
        print("\n")
        
        result = image_generator.analyze_image(image_path)
        
        # Verificar resultado
        if "error" in result:
            print(f"‚ùå Error: {result['error']}")
            return None
        
        # Mostrar resultado
        print("‚úÖ An√°lisis de imagen:")
        print(f"Formato: {result['format']}")
        print(f"Modo: {result['mode']}")
        print(f"Dimensiones: {result['width']}x{result['height']}")
        print(f"Tama√±o: {result['size_bytes']} bytes")
        
        # Mostrar informaci√≥n EXIF si est√° disponible
        if "exif" in result and result["exif"]:
            print("\nInformaci√≥n EXIF:")
            for key, value in result["exif"].items():
                print(f"  {key}: {value}")
        
        return result
    
    except Exception as e:
        logger.error(f"Error en an√°lisis de imagen: {e}")
        print(f"‚ùå Error: {e}")
        return None

def main():
    """
    Funci√≥n principal.
    """
    parser = argparse.ArgumentParser(description="Prueba del generador de im√°genes")
    subparsers = parser.add_subparsers(dest="command", help="Comando a ejecutar")
    
    # Comando: generate
    generate_parser = subparsers.add_parser("generate", help="Generar imagen")
    generate_parser.add_argument("prompt", help="Descripci√≥n textual de la imagen")
    generate_parser.add_argument("--model", help="Modelo a utilizar")
    generate_parser.add_argument("--style", help="Estilo de la imagen")
    generate_parser.add_argument("--size", help="Tama√±o de la imagen (ej. '1024x1024')")
    generate_parser.add_argument("--format", help="Formato de la imagen (png, jpeg)")
    generate_parser.add_argument("--output", help="Ruta de salida para la imagen")
    
    # Comando: edit
    edit_parser = subparsers.add_parser("edit", help="Editar imagen")
    edit_parser.add_argument("image", help="Ruta de la imagen a editar")
    edit_parser.add_argument("--operations", type=json.loads, required=True, help="Operaciones en formato JSON")
    edit_parser.add_argument("--format", help="Formato de salida")
    edit_parser.add_argument("--output", help="Ruta de salida para la imagen")
    
    # Comando: analyze
    analyze_parser = subparsers.add_parser("analyze", help="Analizar imagen")
    analyze_parser.add_argument("image", help="Ruta de la imagen a analizar")
    
    args = parser.parse_args()
    
    if args.command == "generate":
        test_generate_image(
            prompt=args.prompt,
            model=args.model,
            style=args.style,
            size=args.size,
            format=args.format,
            output_path=args.output
        )
    
    elif args.command == "edit":
        test_edit_image(
            image_path=args.image,
            operations=args.operations,
            format=args.format,
            output_path=args.output
        )
    
    elif args.command == "analyze":
        test_analyze_image(image_path=args.image)
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
